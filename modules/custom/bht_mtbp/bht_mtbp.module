<?php

/**
 * BHT breadcrumbs module.
 *
 * Based on Menu Trail By Path
 */
/**
 * @file
 * Expand menu items and set active-trail according to current path
 *
 * Drupal default set active-trail for parent menu items only if
 * the menu contains a link to the current page.
 * This module sets the active-trail according to the path URL
 * It works for pages even if they are not in menu
 *
 * eg. if current page is foo/bar/zee
 * foo & foo/bar menu items are set as active-trail and expanded
 */

/**
 * Implements hook_block_info().
 */
function bht_mtbp_block_info() {
  $blocks = array();

  $blocks['back_button'] = array(
    'info' => t('Back button'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'title' => '<none>',
  );

  return $blocks;
}

/**
 * Implements hook_page_delivery_callback_alter().
 *
 * This is the only hook that occurs after the page callback, but before
 * hook_page_build (when blocks are added). We're using this hook for its
 * timing, not its data.
 */
function bht_mtbp_page_delivery_callback_alter() {
  global $language;

  $breadcrumb_override = FALSE;
  $path_alias = drupal_get_path_alias();
  $path_title = drupal_get_title();

  // Override certain paths or get the parents trail.
  switch ($path_alias) {
    case 'checkout':
      $path_title = t('Checkout');
      $breadcrumb_override = TRUE;
      break;

    case 'search':
      $path_title = t('Search');
      $breadcrumb_override = TRUE;
      break;

    case 'user/login':
      $path_title = t('Login');
      $breadcrumb_override = TRUE;
      break;

    case 'user/register':
      $path_title = t('Register');
      $breadcrumb_override = TRUE;
      break;

    default:
      $parent_candidates = _bht_mtbp_get_parent_candidates($path_alias);
      break;
  }

  if ($breadcrumb_override === FALSE) {
    // Don't even bother if current page is root
    if (empty($parent_candidates)) {
      return;
    }

    $matched_link_titles = _bht_mtbp_set_active_trail($parent_candidates, $language);
  }

  // Also set breadcrumb according to path URL as well
  // First breadcrumbs is always Home
  $breadcrumbs[] = theme('bht_breadcrumb_link', array(
    'title' => t('Home'),
    'path' => url('<front>'),
      )
  );

  if ($breadcrumb_override === FALSE) {
    // Remove current page from breadcrumb
    array_pop($parent_candidates);

    foreach ($parent_candidates as $link_path) {
      // If title of the page is found on a menu item, use it
      if (isset($matched_link_titles[$link_path])) {
        $breadcrumbs[] = theme('bht_breadcrumb_link', array(
          'title' => $matched_link_titles[$link_path],
          'path' => url($link_path),
            )
        );
      }
      // Otherwise, use slow method to find out the title of page
      elseif ($menu_item = menu_get_item($link_path)) {
        $breadcrumbs[] = theme('bht_breadcrumb_link', array(
          'title' => $menu_item['title'],
          'path' => url($link_path),
            )
        );
      }
    }
  }

  $breadcrumbs[] = theme('bht_breadcrumb_no_link', array(
    'title' => $path_title,
      )
  );

  drupal_set_breadcrumb($breadcrumbs);
}

/**
 * Set the active trail for the given parents
 *
 * @param array $parent_candidates
 * @param string $language
 *
 * @return array
 *   A list of titles used in the menu
 */
function _bht_mtbp_set_active_trail(array $parent_candidates = array(), $language = 'en') {
// Find link items matching the parent candidates in all menus
  $matched_menus = array();
  $matched_link_titles = array();
  $results = db_select('menu_links', 'ml')
      ->fields('ml', array(
        'menu_name',
        'mlid',
        'link_path',
        'link_title',
        'depth'
      ))
      ->condition('link_path', $parent_candidates, 'IN')
      ->execute();

  foreach ($results as $record) {
    // Do not touch admin menus
    if (in_array($record->menu_name, array('management', 'devel'))) {
      continue;
    }

    // If there is more than one matched link in a menu, use the deepest
    elseif (!isset($matched_menus[$record->menu_name]) || $record->depth > $matched_menus[$record->menu_name]['depth']) {
      $matched_menus[$record->menu_name]['link_path'] = $record->link_path;
      $matched_menus[$record->menu_name]['depth'] = $record->depth;
    }

    // Get the Link Title if it can be found in a menu item
    if ($record->link_title && !isset($matched_link_titles[$record->link_path])) {
      $matched_link_titles[$record->link_path] = $record->link_title;
      if (module_exists('i18n_menu')) {
        $matched_link_titles[$record->link_path] = _i18n_menu_link_title((array) $record, $language->language);
      }
    }
  }

  // Set the active-trail for each menu containing one of the candidates
  foreach ($matched_menus as $menu_name => $menu_link) {
    menu_tree_set_path($menu_name, $menu_link['link_path']);
  }

  return $matched_link_titles;
}

/**
 * Return an array of parent candidates
 * e.g. for path 'foo/bar/zee'
 * return array of internal drupal paths for 'foo', 'foo/bar', 'foo/bar/zee'
 */
function _bht_mtbp_get_parent_candidates($path) {
  // check if the given path is alias
  if (
      preg_match("/^node\/(\d+)/", $path) ||
      preg_match("/^taxonomy\/term\/(\d+)/", $path) ||
      preg_match("/^user\/(\d+)/", $path)
  ) {
    $parent_candidates[] = drupal_get_normal_path(rtrim($path, '/'));
  }
  else {
    $pieces = explode('/', $path);
    $path = '';
    $parent_candidates = array();

    foreach ($pieces as $piece) {
      $path .= $piece . '/';
      $parent_candidates[] = drupal_get_normal_path(rtrim($path, '/'));
    }
  }

  return $parent_candidates;
}

/**
 * Implements HOOK_theme()
 *
 * @return array
 */
function bht_mtbp_theme() {
  return array(
    'bht_breadcrumb_link' => array(
      'variables' => array(
        'title' => NULL,
        'path' => NULL,
      ),
      'template' => 'bht-breadcrumb-link',
    ),
    'bht_breadcrumb_no_link' => array(
      'variables' => array(
        'title' => NULL,
      ),
      'template' => 'bht-breadcrumb-no-link',
    ),
  );
}

/**
 * @param string $bem_class
 * @param bool $wrapper
 *
 * @return null|string
 */
function _bht_mtbp_back_link($bem_class = 'breadcrumb', $wrapper = TRUE) {
  $output = '';

  // Get the breadcrumbs as formatted above
  $breadcrumbs = drupal_get_breadcrumb();

  // Skip the 403-, 404-, 1st level and homepage.
  if (!_bht_mtbp_show_back_button($breadcrumbs)) {
    return $output;
  }

  // Grab a central static back_crumb_link variable
  $back_crumb_link = &drupal_static(__FUNCTION__);

  // No crumb_link variable found
  if (empty($back_crumb_link)) {

    // Get the last breadcrumb item that contains a link
    do {
      $last_breadcrumb = array_pop($breadcrumbs);
      if (preg_match(
              '/(\s{1}href="{1}[a-zA-Z\/\-]+"{1}){1}/', $last_breadcrumb
          )
      ) {
        $back_crumb = $last_breadcrumb;
        break;
      }
      else {
        $back_crumb = '';
      }
    } while (gettype($breadcrumbs) == 'array' && count($breadcrumbs) > 1);

    // Remove microdata and add a predicate (needed for accessibility) to the breadcrumb
    $back_crumb_replaced = preg_replace(
        array(
      '/(\s{1}itemprop="{1}[a-zA-Z\-]+"{1})+/',
      '/(<{1}[a-zA-Z\s="_-]+breadcrumb__text{1}[a-zA-Z\s="_-]+>{1})([^<>]+)(<{1}\/{1}[a-zA-Z\s="_-]+>{1})/'
        ), array(
      '',
      '$1' . t(
          '<span class="breadcrumb__predicate">Back to </span>!crumb'
      ) . '$3'
        ), $back_crumb
    );

    // Get the breadcrumb title
    preg_match(
        '/(<{1}[a-zA-Z\s="_-]+breadcrumb__text{1}[a-zA-Z\s="_-]+>{1})([^<>]+)(<{1}\/{1}[a-zA-Z\s="_-]+>{1})/', $back_crumb, $back_crumb_match
    );

    // Replace the breadcrumb placeholder !crumb with the breadcrumb title
    if (isset($back_crumb_match[2]) && !empty($back_crumb_match[2])) {
      $back_crumb_replaced = preg_replace(
          '/(\!crumb){1}/', strtolower($back_crumb_match[2]), $back_crumb_replaced, 1, $replacements
      );
      // The process succeeded
      if ($replacements === 1) { // Replace the back crumb
        $back_crumb = $back_crumb_replaced;
      }
    }

    // Alter the block class if needed
    if ($bem_class !== 'breadcrumb') {
      $back_crumb = preg_replace(
          '/(\s{1}class="){1}(breadcrumb){1}([a-zA-Z\-_]+"{1})+/', '$1' . $bem_class . '$3', $back_crumb
      );
    }

    // Catch any preg_replace errors
    if (!is_null($back_crumb)) {
      $back_crumb_link = $back_crumb;
    }
  }

  if (!empty($back_crumb_link)) {
    // Add a wrapper if needed
    if ($wrapper) {
      $output .= '<div class="' . $bem_class . '__back">';
    }

    $output .= $back_crumb_link;

    // Add a wrapper if needed
    if ($wrapper) {
      $output .= '</div>';
    }
  }

  return $output;
}

/**
 * Check if the 'back button' should be shown on the current page
 *
 * @param array $breadcrumbs
 *
 * @return bool
 */
function _bht_mtbp_show_back_button(array $breadcrumbs = array()) {
  // Don't show the block on 403 / 404 pages
  $headers = drupal_get_http_header();
  if (isset($headers['status']) && $headers['status'] == '404 Not Found') {
    return FALSE;
  }
  if (isset($headers['status']) && $headers['status'] == '403 Forbidden') {
    return FALSE;
  }

  // No need to show a back to button if the breadcrumb is empty
  if (empty($breadcrumbs)) {
    return FALSE;
  }

  // Prevent the Back to home button (it's so 90's)
  if (count($breadcrumbs) <= 2) {
    return FALSE;
  }

  return TRUE;
}
